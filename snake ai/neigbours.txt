if w_rows <= h_rows:


    ANGELS:
    0 --> w_rows & 1
    w_rows - 1 --> w_rows - 2 & w_rows * 2 - 1
    w_rows * (h_rows - 1) --> h_rows * w_rows - w_rows + 1 & w_rows * (h_rows - 1) - w_rows
    h_rows * w_rows - 1 --> h_rows * w_rows - 2 & h_rows * w_rows - w_rows - 1


    SIDES:
    for n, c in num_coordinates.items():
        # exclude sides
        if c[1] != 0 and c[1] != h_rows - 1:
            # exclude interior
            if c[0] == 0:
                neighbours[n] = (n + 1, n - w_rows, n + w_rows)
            elif c[0] == w_rows - 1:
                neighbours[n] = (n - 1, n + w_rows, n - w_rows)
        # top sides
        elif c[1] == h_rows - 1:
            if c[0] != 0 and c[0] != w_rows - 1:
                neighbours[n] = (n - 1, n + 1, n - w_rows)
        elif c[1] == 0:
            if c[0] != 0 and c[0] != w_rows - 1:
                neighbours[n] = (n - 1, n + 1, n + w_rows)

  
# MIDDLE TILES
for n, c in num_coordinates.items():
    if c[0] != 0 and c[0] != w_rows - 1 and c[1] != h_rows - 1 and c[1] != 0:
        neighbours[n] = (n + 1, n - 1, n + w_rows, n - w_rows)

